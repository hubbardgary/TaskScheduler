@using PagedList.Mvc;
@using TaskScheduler.Web.Models.Recording;
@using TaskScheduler.Web.Models.Enums;
@model RecordingIndexViewModel
    
@Styles.Render("~/Content/PagedList.css")

@{
    ViewBag.Title = "Scheduled Recordings";
    ViewBag.CurrentPage = Model.Recordings.PageNumber;
}

<h2>Scheduled Recordings</h2>

@if (Model.ActionOutcome != ActionOutcome.None)
{
    <div class="alert alert-success alert-dismissable fade in">
        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
        Recording
        @switch (Model.ActionOutcome)
        {
            case ActionOutcome.CreateSuccess:
                @:created
                break;
            case ActionOutcome.CreateWithLinkedShutdownSuccess:
                @:and its linked shutdown created
                break;
            case ActionOutcome.EditSuccess:
                @:updated
                break;
            case ActionOutcome.EditWithLinkedShutdownSuccess:
                @:and its linked shutdown updated
                break;
            case ActionOutcome.DeleteSuccess:
                @:deleted
                break;
            case ActionOutcome.DeleteWithLinkedShutdownSuccess:
                @:and its linked shutdown deleted
                break;
        }
        successfully.
    </div>
}

@using (Html.BeginForm("Index", "Recording", new { page = ViewBag.CurrentPage }))
{
    <p>
        <button type="button" class="btn btn-primary" onclick="location.href='@Url.Action("Create", "Recording")';return false;">Create New</button>
        <button id="editSelected" class="btn btn-primary disabled" onclick="location.href = editUrl.replace('dummyId', $(':checkbox[name*=\'Selected\']:checked:first')[0].id); return false;">Edit Selected</button>
        <button id="deleteSelected" class="btn btn-danger disabled" data-toggle="modal" data-target=".bs-confirm-delete-modal">Delete Selected</button>
    </p>
    <table class="table table-striped table-hover">
        <tr>
            <th>

            </th>
            <th>
                @Html.ActionLink("Title", "Index", new { page = ViewBag.CurrentPage, sortOrder = "Title" })
            </th>
            <th>
                @Html.ActionLink("Channel", "Index", new { page = ViewBag.CurrentPage, sortOrder = "ChannelName" })
            </th>
            <th>
                @Html.ActionLink("Start Date", "Index", new { page = ViewBag.CurrentPage, sortOrder = "StartDate" })
            </th>
            <th>
                @Html.ActionLink("Start Time", "Index", new { page = ViewBag.CurrentPage, sortOrder = "StartTime" })
            </th>
            <th>
                @Html.ActionLink("End Time", "Index", new { page = ViewBag.CurrentPage, sortOrder = "EndTime" })
            </th>
            <th>
                Enabled
            </th>
            <th>
                Recurring
            </th>
            <th></th>
        </tr>

        @* Need to use zero-based index to ensure in-built model-binding materialises models on post
            Also note the 'HiddenFor' elements that ensure the corresponding items get posted.
            This is necessary so MVC can match up the ids and other attributes. *@
        @for (int i = 0; i < Model.Recordings.Count; i++)
        {
            <tr>
                <td>
                    @Html.CheckBoxFor(modelItem => Model.Recordings[i].Selected, new { id = Model.Recordings[i].Title })
                    @Html.HiddenFor(modelItem => Model.Recordings[i].Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.Recordings[i].Title)
                    @Html.HiddenFor(modelItem => Model.Recordings[i].Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.Recordings[i].ChannelName)
                    @Html.HiddenFor(modelItem => Model.Recordings[i].ChannelName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.Recordings[i].StartDate)
                    @Html.HiddenFor(modelItem => Model.Recordings[i].StartDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.Recordings[i].StartTime)
                    @Html.HiddenFor(modelItem => Model.Recordings[i].StartTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.Recordings[i].EndTime)
                    @Html.HiddenFor(modelItem => Model.Recordings[i].EndTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.Recordings[i].IsEnabled)
                    @Html.HiddenFor(modelItem => Model.Recordings[i].IsEnabled)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.Recordings[i].IsRecurring)
                    @Html.HiddenFor(modelItem => Model.Recordings[i].IsRecurring)
                </td>
            </tr>
        }

    </table>
    <br />
    <p>
        Page @(Model.Recordings.PageCount < Model.Recordings.PageNumber ? 0 : Model.Recordings.PageNumber) of @Model.Recordings.PageCount
        @Html.PagedListPager(Model.Recordings, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
    </p>

    <!-- Modal dialog to confirm deletion -->
    <div class="modal fade bs-confirm-delete-modal" tabindex="-1" role="dialog" aria-labelledby="Confirm Delete" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button class="close" data-dismiss="modal">x</button>
                    <h3 class="modal-title">Confirm Delete</h3>
                </div>
                <div class="modal-body">
                    <p id="deleteConfirmMsg"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Cancel</button>
                    <input type="submit" value="Continue" class="btn btn-danger" />
                </div>
            </div>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/Scripts/Shared/Index.js")
}

<script language="JavaScript">
    var editUrl = "@Url.Action("Edit", "Recording", new { id = "dummyId" })";
</script>